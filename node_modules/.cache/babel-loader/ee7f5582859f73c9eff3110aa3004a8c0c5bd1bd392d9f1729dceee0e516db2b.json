{"ast":null,"code":"import Papa from 'papaparse';\nexport const processCSVData = csvText => {\n  return new Promise((resolve, reject) => {\n    Papa.parse(csvText, {\n      header: true,\n      skipEmptyLines: true,\n      complete: results => {\n        if (results.errors.length > 0) {\n          reject(new Error('Error parsing CSV: ' + results.errors[0].message));\n        } else {\n          const processedData = results.data.map(row => ({\n            ...row,\n            // Clean and parse numeric values\n            'List Price': parsePrice(row['List Price']),\n            'Close Price': parsePrice(row['Close Price']),\n            'Above Grade Finished SQFT': parseNumber(row['Above Grade Finished SQFT']),\n            'Price/SqFt': parsePrice(row['Price/SqFt']),\n            'Below Grade Finished SQFT': parseNumber(row['Below Grade Finished SQFT']),\n            'Beds': parseNumber(row['Beds']),\n            'Baths': parseBaths(row['Baths']),\n            'Year Built': parseNumber(row['Year Built']),\n            'DOM': parseNumber(row['DOM']),\n            'CDOM': parseNumber(row['CDOM']),\n            // Calculate additional fields\n            'Total SQFT': (parseNumber(row['Above Grade Finished SQFT']) || 0) + (parseNumber(row['Below Grade Finished SQFT']) || 0),\n            'Price Difference': parsePrice(row['Close Price']) - parsePrice(row['List Price']),\n            'Price Difference %': parsePrice(row['Close Price']) && parsePrice(row['List Price']) ? ((parsePrice(row['Close Price']) - parsePrice(row['List Price'])) / parsePrice(row['List Price']) * 100).toFixed(2) : null,\n            'Zillow Link': generateZillowLink(row['Address'], row['City'])\n          }));\n          resolve(processedData);\n        }\n      },\n      error: error => {\n        reject(new Error('Error parsing CSV: ' + error.message));\n      }\n    });\n  });\n};\nexport const calculateComparisons = data => {\n  if (data.length === 0) return data;\n\n  // Find the EXP property to use as reference\n  const expProperty = data.find(prop => prop['Status'] === 'EXP');\n  if (!expProperty) {\n    console.warn('No EXP property found in data. Skipping comparison calculations.');\n    return data;\n  }\n  console.log('Using EXP property as reference:', expProperty['Address']);\n  return data.map(property => {\n    const sqftDiff = (property['Above Grade Finished SQFT'] || 0) - (expProperty['Above Grade Finished SQFT'] || 0);\n    const lotDiff = parseLotSize(property['Acres/Lot SF']) - parseLotSize(expProperty['Acres/Lot SF']);\n    return {\n      ...property,\n      'Sq Ft Difference vs EXP': sqftDiff,\n      'Lot Difference vs EXP': lotDiff,\n      'Price vs EXP': property['List Price'] && expProperty['List Price'] ? property['List Price'] - expProperty['List Price'] : null,\n      'Price vs EXP %': property['List Price'] && expProperty['List Price'] ? ((property['List Price'] - expProperty['List Price']) / expProperty['List Price'] * 100).toFixed(2) : null,\n      'Is Reference Property': property['Status'] === 'EXP'\n    };\n  });\n};\nexport const generateSummaryStats = data => {\n  const closedProperties = data.filter(prop => prop['Status'] === 'CLS' && prop['Close Price']);\n  const activeProperties = data.filter(prop => prop['Status'] === 'ACT');\n  const pendingProperties = data.filter(prop => prop['Status'] === 'PND');\n  const avgListPrice = data.reduce((sum, prop) => sum + (prop['List Price'] || 0), 0) / data.length;\n  const avgClosePrice = closedProperties.length > 0 ? closedProperties.reduce((sum, prop) => sum + (prop['Close Price'] || 0), 0) / closedProperties.length : 0;\n  const avgPricePerSqFt = data.reduce((sum, prop) => sum + (prop['Price/SqFt'] || 0), 0) / data.length;\n  const avgDaysOnMarket = data.reduce((sum, prop) => sum + (prop['DOM'] || 0), 0) / data.length;\n  return {\n    totalProperties: data.length,\n    closedProperties: closedProperties.length,\n    activeProperties: activeProperties.length,\n    pendingProperties: pendingProperties.length,\n    avgListPrice: avgListPrice.toFixed(2),\n    avgClosePrice: avgClosePrice.toFixed(2),\n    avgPricePerSqFt: avgPricePerSqFt.toFixed(2),\n    avgDaysOnMarket: avgDaysOnMarket.toFixed(0),\n    avgPriceDifference: closedProperties.length > 0 ? (closedProperties.reduce((sum, prop) => sum + (prop['Price Difference'] || 0), 0) / closedProperties.length).toFixed(2) : 0\n  };\n};\n\n// Helper functions\nconst parsePrice = priceStr => {\n  if (!priceStr) return null;\n  const cleaned = priceStr.replace(/[$,]/g, '');\n  const parsed = parseFloat(cleaned);\n  return isNaN(parsed) ? null : parsed;\n};\nconst parseNumber = numStr => {\n  if (!numStr) return null;\n  const cleaned = numStr.replace(/,/g, '');\n  const parsed = parseFloat(cleaned);\n  return isNaN(parsed) ? null : parsed;\n};\nconst parseBaths = bathsStr => {\n  if (!bathsStr) return null;\n  // Handle formats like \"3\", \"1-Feb\", \"Mar-00\"\n  if (bathsStr.includes('-')) {\n    const parts = bathsStr.split('-');\n    const first = parseFloat(parts[0]);\n    const second = parseFloat(parts[1]);\n    if (!isNaN(first) && !isNaN(second)) {\n      return first + second;\n    }\n  }\n  return parseNumber(bathsStr);\n};\nconst parseLotSize = lotStr => {\n  if (!lotStr) return 0;\n  // Extract the first number from formats like \"0.21 / 9365\"\n  const match = lotStr.match(/(\\d+\\.?\\d*)/);\n  return match ? parseFloat(match[1]) : 0;\n};\nexport const exportToCSV = (data, filename = 'processed_data.csv') => {\n  const csv = Papa.unparse(data);\n  const blob = new Blob([csv], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const link = document.createElement('a');\n  const url = URL.createObjectURL(blob);\n  link.setAttribute('href', url);\n  link.setAttribute('download', filename);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};","map":{"version":3,"names":["Papa","processCSVData","csvText","Promise","resolve","reject","parse","header","skipEmptyLines","complete","results","errors","length","Error","message","processedData","data","map","row","parsePrice","parseNumber","parseBaths","toFixed","generateZillowLink","error","calculateComparisons","expProperty","find","prop","console","warn","log","property","sqftDiff","lotDiff","parseLotSize","generateSummaryStats","closedProperties","filter","activeProperties","pendingProperties","avgListPrice","reduce","sum","avgClosePrice","avgPricePerSqFt","avgDaysOnMarket","totalProperties","avgPriceDifference","priceStr","cleaned","replace","parsed","parseFloat","isNaN","numStr","bathsStr","includes","parts","split","first","second","lotStr","match","exportToCSV","filename","csv","unparse","blob","Blob","type","link","document","createElement","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild"],"sources":["/Users/krishnakumanan/Desktop/pricing-pin/src/utils/csvProcessor.js"],"sourcesContent":["import Papa from 'papaparse';\n\nexport const processCSVData = (csvText) => {\n  return new Promise((resolve, reject) => {\n    Papa.parse(csvText, {\n      header: true,\n      skipEmptyLines: true,\n      complete: (results) => {\n        if (results.errors.length > 0) {\n          reject(new Error('Error parsing CSV: ' + results.errors[0].message));\n        } else {\n          const processedData = results.data.map(row => ({\n            ...row,\n            // Clean and parse numeric values\n            'List Price': parsePrice(row['List Price']),\n            'Close Price': parsePrice(row['Close Price']),\n            'Above Grade Finished SQFT': parseNumber(row['Above Grade Finished SQFT']),\n            'Price/SqFt': parsePrice(row['Price/SqFt']),\n            'Below Grade Finished SQFT': parseNumber(row['Below Grade Finished SQFT']),\n            'Beds': parseNumber(row['Beds']),\n            'Baths': parseBaths(row['Baths']),\n            'Year Built': parseNumber(row['Year Built']),\n            'DOM': parseNumber(row['DOM']),\n            'CDOM': parseNumber(row['CDOM']),\n            // Calculate additional fields\n            'Total SQFT': (parseNumber(row['Above Grade Finished SQFT']) || 0) + (parseNumber(row['Below Grade Finished SQFT']) || 0),\n            'Price Difference': parsePrice(row['Close Price']) - parsePrice(row['List Price']),\n            'Price Difference %': parsePrice(row['Close Price']) && parsePrice(row['List Price']) \n              ? ((parsePrice(row['Close Price']) - parsePrice(row['List Price'])) / parsePrice(row['List Price']) * 100).toFixed(2)\n              : null,\n            'Zillow Link': generateZillowLink(row['Address'], row['City']),\n          }));\n          resolve(processedData);\n        }\n      },\n      error: (error) => {\n        reject(new Error('Error parsing CSV: ' + error.message));\n      }\n    });\n  });\n};\n\nexport const calculateComparisons = (data) => {\n  if (data.length === 0) return data;\n\n  // Find the EXP property to use as reference\n  const expProperty = data.find(prop => prop['Status'] === 'EXP');\n  \n  if (!expProperty) {\n    console.warn('No EXP property found in data. Skipping comparison calculations.');\n    return data;\n  }\n\n  console.log('Using EXP property as reference:', expProperty['Address']);\n\n  return data.map(property => {\n    const sqftDiff = (property['Above Grade Finished SQFT'] || 0) - (expProperty['Above Grade Finished SQFT'] || 0);\n    const lotDiff = parseLotSize(property['Acres/Lot SF']) - parseLotSize(expProperty['Acres/Lot SF']);\n    \n    return {\n      ...property,\n      'Sq Ft Difference vs EXP': sqftDiff,\n      'Lot Difference vs EXP': lotDiff,\n      'Price vs EXP': property['List Price'] && expProperty['List Price'] \n        ? property['List Price'] - expProperty['List Price']\n        : null,\n      'Price vs EXP %': property['List Price'] && expProperty['List Price']\n        ? ((property['List Price'] - expProperty['List Price']) / expProperty['List Price'] * 100).toFixed(2)\n        : null,\n      'Is Reference Property': property['Status'] === 'EXP',\n    };\n  });\n};\n\nexport const generateSummaryStats = (data) => {\n  const closedProperties = data.filter(prop => prop['Status'] === 'CLS' && prop['Close Price']);\n  const activeProperties = data.filter(prop => prop['Status'] === 'ACT');\n  const pendingProperties = data.filter(prop => prop['Status'] === 'PND');\n\n  const avgListPrice = data.reduce((sum, prop) => sum + (prop['List Price'] || 0), 0) / data.length;\n  const avgClosePrice = closedProperties.length > 0 \n    ? closedProperties.reduce((sum, prop) => sum + (prop['Close Price'] || 0), 0) / closedProperties.length\n    : 0;\n  const avgPricePerSqFt = data.reduce((sum, prop) => sum + (prop['Price/SqFt'] || 0), 0) / data.length;\n  const avgDaysOnMarket = data.reduce((sum, prop) => sum + (prop['DOM'] || 0), 0) / data.length;\n\n  return {\n    totalProperties: data.length,\n    closedProperties: closedProperties.length,\n    activeProperties: activeProperties.length,\n    pendingProperties: pendingProperties.length,\n    avgListPrice: avgListPrice.toFixed(2),\n    avgClosePrice: avgClosePrice.toFixed(2),\n    avgPricePerSqFt: avgPricePerSqFt.toFixed(2),\n    avgDaysOnMarket: avgDaysOnMarket.toFixed(0),\n    avgPriceDifference: closedProperties.length > 0 \n      ? (closedProperties.reduce((sum, prop) => sum + (prop['Price Difference'] || 0), 0) / closedProperties.length).toFixed(2)\n      : 0,\n  };\n};\n\n// Helper functions\nconst parsePrice = (priceStr) => {\n  if (!priceStr) return null;\n  const cleaned = priceStr.replace(/[$,]/g, '');\n  const parsed = parseFloat(cleaned);\n  return isNaN(parsed) ? null : parsed;\n};\n\nconst parseNumber = (numStr) => {\n  if (!numStr) return null;\n  const cleaned = numStr.replace(/,/g, '');\n  const parsed = parseFloat(cleaned);\n  return isNaN(parsed) ? null : parsed;\n};\n\nconst parseBaths = (bathsStr) => {\n  if (!bathsStr) return null;\n  // Handle formats like \"3\", \"1-Feb\", \"Mar-00\"\n  if (bathsStr.includes('-')) {\n    const parts = bathsStr.split('-');\n    const first = parseFloat(parts[0]);\n    const second = parseFloat(parts[1]);\n    if (!isNaN(first) && !isNaN(second)) {\n      return first + second;\n    }\n  }\n  return parseNumber(bathsStr);\n};\n\nconst parseLotSize = (lotStr) => {\n  if (!lotStr) return 0;\n  // Extract the first number from formats like \"0.21 / 9365\"\n  const match = lotStr.match(/(\\d+\\.?\\d*)/);\n  return match ? parseFloat(match[1]) : 0;\n};\n\nexport const exportToCSV = (data, filename = 'processed_data.csv') => {\n  const csv = Papa.unparse(data);\n  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n  const link = document.createElement('a');\n  const url = URL.createObjectURL(blob);\n  link.setAttribute('href', url);\n  link.setAttribute('download', filename);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}; "],"mappings":"AAAA,OAAOA,IAAI,MAAM,WAAW;AAE5B,OAAO,MAAMC,cAAc,GAAIC,OAAO,IAAK;EACzC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCL,IAAI,CAACM,KAAK,CAACJ,OAAO,EAAE;MAClBK,MAAM,EAAE,IAAI;MACZC,cAAc,EAAE,IAAI;MACpBC,QAAQ,EAAGC,OAAO,IAAK;QACrB,IAAIA,OAAO,CAACC,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;UAC7BP,MAAM,CAAC,IAAIQ,KAAK,CAAC,qBAAqB,GAAGH,OAAO,CAACC,MAAM,CAAC,CAAC,CAAC,CAACG,OAAO,CAAC,CAAC;QACtE,CAAC,MAAM;UACL,MAAMC,aAAa,GAAGL,OAAO,CAACM,IAAI,CAACC,GAAG,CAACC,GAAG,KAAK;YAC7C,GAAGA,GAAG;YACN;YACA,YAAY,EAAEC,UAAU,CAACD,GAAG,CAAC,YAAY,CAAC,CAAC;YAC3C,aAAa,EAAEC,UAAU,CAACD,GAAG,CAAC,aAAa,CAAC,CAAC;YAC7C,2BAA2B,EAAEE,WAAW,CAACF,GAAG,CAAC,2BAA2B,CAAC,CAAC;YAC1E,YAAY,EAAEC,UAAU,CAACD,GAAG,CAAC,YAAY,CAAC,CAAC;YAC3C,2BAA2B,EAAEE,WAAW,CAACF,GAAG,CAAC,2BAA2B,CAAC,CAAC;YAC1E,MAAM,EAAEE,WAAW,CAACF,GAAG,CAAC,MAAM,CAAC,CAAC;YAChC,OAAO,EAAEG,UAAU,CAACH,GAAG,CAAC,OAAO,CAAC,CAAC;YACjC,YAAY,EAAEE,WAAW,CAACF,GAAG,CAAC,YAAY,CAAC,CAAC;YAC5C,KAAK,EAAEE,WAAW,CAACF,GAAG,CAAC,KAAK,CAAC,CAAC;YAC9B,MAAM,EAAEE,WAAW,CAACF,GAAG,CAAC,MAAM,CAAC,CAAC;YAChC;YACA,YAAY,EAAE,CAACE,WAAW,CAACF,GAAG,CAAC,2BAA2B,CAAC,CAAC,IAAI,CAAC,KAAKE,WAAW,CAACF,GAAG,CAAC,2BAA2B,CAAC,CAAC,IAAI,CAAC,CAAC;YACzH,kBAAkB,EAAEC,UAAU,CAACD,GAAG,CAAC,aAAa,CAAC,CAAC,GAAGC,UAAU,CAACD,GAAG,CAAC,YAAY,CAAC,CAAC;YAClF,oBAAoB,EAAEC,UAAU,CAACD,GAAG,CAAC,aAAa,CAAC,CAAC,IAAIC,UAAU,CAACD,GAAG,CAAC,YAAY,CAAC,CAAC,GACjF,CAAC,CAACC,UAAU,CAACD,GAAG,CAAC,aAAa,CAAC,CAAC,GAAGC,UAAU,CAACD,GAAG,CAAC,YAAY,CAAC,CAAC,IAAIC,UAAU,CAACD,GAAG,CAAC,YAAY,CAAC,CAAC,GAAG,GAAG,EAAEI,OAAO,CAAC,CAAC,CAAC,GACnH,IAAI;YACR,aAAa,EAAEC,kBAAkB,CAACL,GAAG,CAAC,SAAS,CAAC,EAAEA,GAAG,CAAC,MAAM,CAAC;UAC/D,CAAC,CAAC,CAAC;UACHd,OAAO,CAACW,aAAa,CAAC;QACxB;MACF,CAAC;MACDS,KAAK,EAAGA,KAAK,IAAK;QAChBnB,MAAM,CAAC,IAAIQ,KAAK,CAAC,qBAAqB,GAAGW,KAAK,CAACV,OAAO,CAAC,CAAC;MAC1D;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMW,oBAAoB,GAAIT,IAAI,IAAK;EAC5C,IAAIA,IAAI,CAACJ,MAAM,KAAK,CAAC,EAAE,OAAOI,IAAI;;EAElC;EACA,MAAMU,WAAW,GAAGV,IAAI,CAACW,IAAI,CAACC,IAAI,IAAIA,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,CAAC;EAE/D,IAAI,CAACF,WAAW,EAAE;IAChBG,OAAO,CAACC,IAAI,CAAC,kEAAkE,CAAC;IAChF,OAAOd,IAAI;EACb;EAEAa,OAAO,CAACE,GAAG,CAAC,kCAAkC,EAAEL,WAAW,CAAC,SAAS,CAAC,CAAC;EAEvE,OAAOV,IAAI,CAACC,GAAG,CAACe,QAAQ,IAAI;IAC1B,MAAMC,QAAQ,GAAG,CAACD,QAAQ,CAAC,2BAA2B,CAAC,IAAI,CAAC,KAAKN,WAAW,CAAC,2BAA2B,CAAC,IAAI,CAAC,CAAC;IAC/G,MAAMQ,OAAO,GAAGC,YAAY,CAACH,QAAQ,CAAC,cAAc,CAAC,CAAC,GAAGG,YAAY,CAACT,WAAW,CAAC,cAAc,CAAC,CAAC;IAElG,OAAO;MACL,GAAGM,QAAQ;MACX,yBAAyB,EAAEC,QAAQ;MACnC,uBAAuB,EAAEC,OAAO;MAChC,cAAc,EAAEF,QAAQ,CAAC,YAAY,CAAC,IAAIN,WAAW,CAAC,YAAY,CAAC,GAC/DM,QAAQ,CAAC,YAAY,CAAC,GAAGN,WAAW,CAAC,YAAY,CAAC,GAClD,IAAI;MACR,gBAAgB,EAAEM,QAAQ,CAAC,YAAY,CAAC,IAAIN,WAAW,CAAC,YAAY,CAAC,GACjE,CAAC,CAACM,QAAQ,CAAC,YAAY,CAAC,GAAGN,WAAW,CAAC,YAAY,CAAC,IAAIA,WAAW,CAAC,YAAY,CAAC,GAAG,GAAG,EAAEJ,OAAO,CAAC,CAAC,CAAC,GACnG,IAAI;MACR,uBAAuB,EAAEU,QAAQ,CAAC,QAAQ,CAAC,KAAK;IAClD,CAAC;EACH,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMI,oBAAoB,GAAIpB,IAAI,IAAK;EAC5C,MAAMqB,gBAAgB,GAAGrB,IAAI,CAACsB,MAAM,CAACV,IAAI,IAAIA,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,IAAIA,IAAI,CAAC,aAAa,CAAC,CAAC;EAC7F,MAAMW,gBAAgB,GAAGvB,IAAI,CAACsB,MAAM,CAACV,IAAI,IAAIA,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,CAAC;EACtE,MAAMY,iBAAiB,GAAGxB,IAAI,CAACsB,MAAM,CAACV,IAAI,IAAIA,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,CAAC;EAEvE,MAAMa,YAAY,GAAGzB,IAAI,CAAC0B,MAAM,CAAC,CAACC,GAAG,EAAEf,IAAI,KAAKe,GAAG,IAAIf,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGZ,IAAI,CAACJ,MAAM;EACjG,MAAMgC,aAAa,GAAGP,gBAAgB,CAACzB,MAAM,GAAG,CAAC,GAC7CyB,gBAAgB,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEf,IAAI,KAAKe,GAAG,IAAIf,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGS,gBAAgB,CAACzB,MAAM,GACrG,CAAC;EACL,MAAMiC,eAAe,GAAG7B,IAAI,CAAC0B,MAAM,CAAC,CAACC,GAAG,EAAEf,IAAI,KAAKe,GAAG,IAAIf,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGZ,IAAI,CAACJ,MAAM;EACpG,MAAMkC,eAAe,GAAG9B,IAAI,CAAC0B,MAAM,CAAC,CAACC,GAAG,EAAEf,IAAI,KAAKe,GAAG,IAAIf,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGZ,IAAI,CAACJ,MAAM;EAE7F,OAAO;IACLmC,eAAe,EAAE/B,IAAI,CAACJ,MAAM;IAC5ByB,gBAAgB,EAAEA,gBAAgB,CAACzB,MAAM;IACzC2B,gBAAgB,EAAEA,gBAAgB,CAAC3B,MAAM;IACzC4B,iBAAiB,EAAEA,iBAAiB,CAAC5B,MAAM;IAC3C6B,YAAY,EAAEA,YAAY,CAACnB,OAAO,CAAC,CAAC,CAAC;IACrCsB,aAAa,EAAEA,aAAa,CAACtB,OAAO,CAAC,CAAC,CAAC;IACvCuB,eAAe,EAAEA,eAAe,CAACvB,OAAO,CAAC,CAAC,CAAC;IAC3CwB,eAAe,EAAEA,eAAe,CAACxB,OAAO,CAAC,CAAC,CAAC;IAC3C0B,kBAAkB,EAAEX,gBAAgB,CAACzB,MAAM,GAAG,CAAC,GAC3C,CAACyB,gBAAgB,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEf,IAAI,KAAKe,GAAG,IAAIf,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGS,gBAAgB,CAACzB,MAAM,EAAEU,OAAO,CAAC,CAAC,CAAC,GACvH;EACN,CAAC;AACH,CAAC;;AAED;AACA,MAAMH,UAAU,GAAI8B,QAAQ,IAAK;EAC/B,IAAI,CAACA,QAAQ,EAAE,OAAO,IAAI;EAC1B,MAAMC,OAAO,GAAGD,QAAQ,CAACE,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;EAC7C,MAAMC,MAAM,GAAGC,UAAU,CAACH,OAAO,CAAC;EAClC,OAAOI,KAAK,CAACF,MAAM,CAAC,GAAG,IAAI,GAAGA,MAAM;AACtC,CAAC;AAED,MAAMhC,WAAW,GAAImC,MAAM,IAAK;EAC9B,IAAI,CAACA,MAAM,EAAE,OAAO,IAAI;EACxB,MAAML,OAAO,GAAGK,MAAM,CAACJ,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;EACxC,MAAMC,MAAM,GAAGC,UAAU,CAACH,OAAO,CAAC;EAClC,OAAOI,KAAK,CAACF,MAAM,CAAC,GAAG,IAAI,GAAGA,MAAM;AACtC,CAAC;AAED,MAAM/B,UAAU,GAAImC,QAAQ,IAAK;EAC/B,IAAI,CAACA,QAAQ,EAAE,OAAO,IAAI;EAC1B;EACA,IAAIA,QAAQ,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;IAC1B,MAAMC,KAAK,GAAGF,QAAQ,CAACG,KAAK,CAAC,GAAG,CAAC;IACjC,MAAMC,KAAK,GAAGP,UAAU,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC;IAClC,MAAMG,MAAM,GAAGR,UAAU,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC;IACnC,IAAI,CAACJ,KAAK,CAACM,KAAK,CAAC,IAAI,CAACN,KAAK,CAACO,MAAM,CAAC,EAAE;MACnC,OAAOD,KAAK,GAAGC,MAAM;IACvB;EACF;EACA,OAAOzC,WAAW,CAACoC,QAAQ,CAAC;AAC9B,CAAC;AAED,MAAMrB,YAAY,GAAI2B,MAAM,IAAK;EAC/B,IAAI,CAACA,MAAM,EAAE,OAAO,CAAC;EACrB;EACA,MAAMC,KAAK,GAAGD,MAAM,CAACC,KAAK,CAAC,aAAa,CAAC;EACzC,OAAOA,KAAK,GAAGV,UAAU,CAACU,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;AACzC,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGA,CAAChD,IAAI,EAAEiD,QAAQ,GAAG,oBAAoB,KAAK;EACpE,MAAMC,GAAG,GAAGlE,IAAI,CAACmE,OAAO,CAACnD,IAAI,CAAC;EAC9B,MAAMoD,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACH,GAAG,CAAC,EAAE;IAAEI,IAAI,EAAE;EAA0B,CAAC,CAAC;EACjE,MAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;EACxC,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACR,IAAI,CAAC;EACrCG,IAAI,CAACM,YAAY,CAAC,MAAM,EAAEH,GAAG,CAAC;EAC9BH,IAAI,CAACM,YAAY,CAAC,UAAU,EAAEZ,QAAQ,CAAC;EACvCM,IAAI,CAACO,KAAK,CAACC,UAAU,GAAG,QAAQ;EAChCP,QAAQ,CAACQ,IAAI,CAACC,WAAW,CAACV,IAAI,CAAC;EAC/BA,IAAI,CAACW,KAAK,CAAC,CAAC;EACZV,QAAQ,CAACQ,IAAI,CAACG,WAAW,CAACZ,IAAI,CAAC;AACjC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}